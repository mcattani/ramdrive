' Gambas class file

Public DirPuntoMontaje As String

Public Sub Form_Open()

  Dim vChk As String

  FMain.Text = Application.Title & " v" & Application.Version

  Settings.Read(Me) ' Leemos la configuración guardada sobre el formulario

  'Seteamos el valor mínimo y máximo del slider
  SbTam.MinValue = 5
  SbTam.MaxValue = Sistema.MemoriaLibre() - 50

  'Chequeamos si hay una versión nueva
  vChk = GitVersion("https://raw.githubusercontent.com/mcattani/ramdrive/master/.project")
  If Application.Version <> vChk Then
    Message.Info(("Nueva versión enconrada!") & ": " & vChk)
  Endif

End

Public Function GitVersion(raw As String) As String ' Función que chequea en GIT si hay una versión nueva

  Dim s As String
  Dim stx As String[]
  Dim r As String
  Dim v As String

  v = ""
  If Exist("/tmp/project.txt") Then
    Shell "rm /tmp/project.txt" Wait
  Endif

  Shell "wget -O '/tmp/project.txt' '" & raw & "'" Wait
  If Exist("/tmp/project.txt") Then
    s = File.Load("/tmp/project.txt")
    stx = Split(s, "\n")
    For Each r In stx
      If InStr(r, "Version=") Then
        If Split(r, "=")[0] = "Version" Then
          v = Split(r, "=")[1]
          Break
        Endif
      Endif
    Next
  Endif
  Return v

End

Public Sub Form_KeyPress()

  If Key.code = Key.Esc Then
    If Message.Question("¿Seguro desea salir de la aplicación?", "Si", "No") = 1 Then
      Settings.write(Me)
      Quit
    Endif
  Endif

End

Public Sub SetUpGrid()
  'Rellenamos el grid con los datos de la memoria disponible

  Dim sMem, sTemp, sHold As String
  Dim sLine As New String[]
  Dim siRow, siCol As Short

  With GridViewFreeMem
    .Columns.count = 7
    .Rows.Count = 3
  End With

  sMem = Sistema.MemSistema()

  For Each sTemp In Split(sMem, "\n")
    Repeat
      sHold = sTemp
      sTemp = Trim(Replace(sTemp, "  ", " "))
    Until sHold = sTemp
    sLine.Add(sTemp & "\n")
  Next

  For siRow = 0 To 2
    If siRow = 0 Then Inc siCol
    For Each sTemp In Split(sLine[siRow], " ")
      GridViewFreeMem[siRow, siCol].text = Trim(sTemp)
      Inc siCol
    Next
    siCol = 0
  Next

  For siCol = 1 To 6
    sTemp = GridViewFreeMem[0, siCol].text
    sTemp = UCase(Left(sTemp, 1)) & Mid(sTemp, 2)
    GridViewFreeMem[0, siCol].text = sTemp
  Next

  GridViewFreeMem.Columns.Width = -1

End

Public Sub TimerMemory_Timer()

  SetUpGrid ' Refresca el GridView con los datos de la memoria
  txMemLibre.Text = Sistema.MemoriaLibre() & " mb" 'Refresca la cantidad de memoria libre
  txDF.Text = Sistema.DFH() 'Refresca el estado del sistema de archivos

End

Public Sub btnMontaje_Click()

  Dialog.Title = "Elija un directorio para montar la unidad"
  Dialog.SelectDirectory
  DirPuntoMontaje = Dialog.Path
  txPuntoMontaje.Text = DirPuntoMontaje
  txPuntoMontaje.Pos = 0

End

Public Sub Form_Close()
  ' Guardmos los valores deltamaño de la ventana

  Settings.Write(Me)
  Quit

End

Public Sub SbTam_Change()

  ' Para transformar los valores de MB a GB

  Dim Tam As Float
  Dim sTam As String

  Tam = sbTam.Value

  If tam > 999 Then
    sTam = Format(Tam / 1000, "#")
    txTam.Text = ("Tamaño elegido: ") & Str(tam / 1000) & " GB"
  Else
    If Tam < 999 Then
      sTam = Format(Tam, "#")
      txTam.Text = ("Tamaño elegido: ") & Str(tam) & " MB"

    Endif

    Print sbTam.Value

  Endif

End

Public Sub Form_Resize()

  SbTam.Width = FMain.Width - 10

End

Public Sub btCrear_Click()

  'Chequeamos que el usuario haya seleccionado una ruta para montar el la unidad
  'y que haya ingresado un password

  If txPuntoMontaje.Text = "" Then
    Message.Warning("Debe seleccionar un directorio para montar la unidad")
    Return
  Endif

  If txPass.Text = "" Then
    Message.Warning("Debe ingresar el password Root/Sudo para crear la unidad")
    Return
  Endif

  Sistema.CRamDrive(txPuntoMontaje.Text, SbTam.Value, txPass.Text)
  Message.Info("¡Unidad Ram Creada!")
  sistema.AbrirCarpeta(txPuntoMontaje.Text)

End

Public Sub btDesmontar_Click()

  'Chequeamos que el usuario haya seleccionado una ruta para montar el la unidad
  'y que haya ingresado un password

  If txPuntoMontaje.Text = "" Then
    Message.Warning("Debe seleccionar un directorio para montar la unidad")
    Return
  Endif

  If txPass.Text = "" Then
    Message.Warning("Debe ingresar el password Root/Sudo para crear la unidad")
    Return
  Endif

  sistema.URamDrive(txPuntoMontaje.Text, txPass.Text)
  Message.Info("¡Unidad Ram Desmontada!")

End

Public Sub mnInfo_Click()

  frmInfo.Show

End

Public Sub mnAcerca_Click()

  frmAbout.Show

End

Public Sub Menu3_Click()

  Settings.Write(Me)
  Quit

End
